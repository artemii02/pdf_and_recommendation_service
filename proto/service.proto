syntax = "proto3";

package services;

// Сервис для работы с PDF
service PDFService {
  // Создание PDF документа для матча
  rpc CreateMatchPDF (MatchPDFRequest) returns (PDFResponse) {}
  // Создание PDF документа для турнира
  rpc CreateTournamentPDF (TournamentPDFRequest) returns (PDFResponse) {}
}

// Сервис рекомендаций
service RecommenderService {
  // Получение рекомендаций для пользователя
  rpc GetRecommendations (RecommendationRequest) returns (RecommendationResponse) {}
  // Обновление данных пользователя
  rpc UpdateUserData (UserDataRequest) returns (UserDataResponse) {}
  rpc GetAvailableTournaments (Empty) returns (TournamentsResponse) {}
}

// Запрос на создание PDF для матча
message MatchPDFRequest {
  string match_id = 1;
  string stage_id = 2;
  string tournament_id = 3;
  string sport = 4;
  repeated TeamInfo teams = 5;
  ScoreInfo score = 6;
  repeated GoalInfo goals = 7;
  repeated AfterMatchPenaltyInfo after_match_penalties = 8;
  LocationInfo location = 9;
  string date = 10;
  bool is_finished = 11;
}

// Запрос на создание PDF для турнира
message TournamentPDFRequest {
  string tournament_id = 1;
  string name = 2;
  string sport = 3;
  string organization_name = 4;
  bytes logo = 5;
  string description = 6;
  string city = 7;
  string registration_deadline = 8;
  bool is_stopped = 9;
  repeated StageInfo stages = 10;
  repeated TeamInfo teams = 11;
  repeated SlotInfo slots = 12;
  repeated GroupInfo groups = 13;
}

// Ответ на создание PDF
message PDFResponse {
    string file_name = 1;
    bytes file_data = 2;
    string mime_type = 3;
    string status = 4;
}


message TournamentsResponse {
    repeated TournamentInfo tournaments = 1;
}

// Структуры данных
message TeamInfo {
  string team_id = 1;
  string name = 2;
  bytes logo = 3;
  string sport = 4;
  optional string invitation_status = 5;
}

message ScoreInfo {
  int32 team_1 = 1;
  int32 team_2 = 2;
}

message GoalInfo {
  string team_id = 1;
  string user_name = 2;
  string user_surname = 3;
  int32 set_number = 4;
  string time = 5;
  bool is_penalty = 6;
}

message AfterMatchPenaltyInfo {
  string team_id = 1;
  string user_name = 2;
  string user_surname = 3;
  bool is_success = 4;
}

message LocationInfo {
  string name = 1;
  string address = 2;
  string city = 3;
}

message StageInfo {
  string stage_id = 1;
  string name = 2;
  bool is_published = 3;
  int32 best_place = 4;
  int32 worst_place = 5;
  repeated MatchInfo matches = 6;
}

message MatchInfo {
  repeated TeamInfo teams = 1;
  ScoreInfo score = 2;
  repeated GoalInfo goals = 3;
  repeated AfterMatchPenaltyInfo after_match_penalties = 4;
  LocationInfo location = 5;
  string date = 6;
  bool is_finished = 7;
}

message SlotInfo {
  string slot_id = 1;
  string tournament_id = 2;
  string date = 3;
  string location_id = 4;
}

message GroupInfo {
  string group_id = 1;
  string name = 2;
  int32 count_teams = 3;
  repeated TeamInfo teams = 4;
}

message TournamentInfo {
  string name = 1;
  bytes logo = 2;
  string organization_name = 3;
  string sport = 4;
  string city = 5;
  string description = 6;
}

// Запрос рекомендаций
message RecommendationRequest {
  string user_id = 1;
  int32 num_recommendations = 2;
  map<string, string> context = 3;
}

// Ответ с рекомендациями
message RecommendationResponse {
  repeated Recommendation recommendations = 1;
}

// Структура рекомендации
message Recommendation {
  string item_id = 1;
  float score = 2;
  map<string, string> metadata = 3;
}

// Запрос на обновление данных пользователя
message UserDataRequest {
  string user_id = 1;
}

// Ответ на обновление данных пользователя
message UserDataResponse {
  string user_id = 1;
  UserData user_data = 2;
}

// Данные пользователя
message UserData {
  string name = 1;
  string surname = 2;
  repeated OrgInfo org_info = 3;
  repeated TeamInfo teams = 4;
  repeated TournamentInfo tournaments = 5;
}

message OrgInfo {
  string name = 1;
  string role = 2;
  bool is_ref = 3;
}

message Empty {

}