# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import service_pb2 as service__pb2


class PDFServiceStub(object):
    """Сервис для работы с PDF
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateMatchPDF = channel.unary_unary(
                '/services.PDFService/CreateMatchPDF',
                request_serializer=service__pb2.MatchPDFRequest.SerializeToString,
                response_deserializer=service__pb2.PDFResponse.FromString,
                )
        self.CreateTournamentPDF = channel.unary_unary(
                '/services.PDFService/CreateTournamentPDF',
                request_serializer=service__pb2.TournamentPDFRequest.SerializeToString,
                response_deserializer=service__pb2.PDFResponse.FromString,
                )
        self.GetPDFStatus = channel.unary_unary(
                '/services.PDFService/GetPDFStatus',
                request_serializer=service__pb2.PDFStatusRequest.SerializeToString,
                response_deserializer=service__pb2.PDFStatusResponse.FromString,
                )


class PDFServiceServicer(object):
    """Сервис для работы с PDF
    """

    def CreateMatchPDF(self, request, context):
        """Создание PDF документа для матча
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateTournamentPDF(self, request, context):
        """Создание PDF документа для турнира
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPDFStatus(self, request, context):
        """Получение статуса генерации PDF
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PDFServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateMatchPDF': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateMatchPDF,
                    request_deserializer=service__pb2.MatchPDFRequest.FromString,
                    response_serializer=service__pb2.PDFResponse.SerializeToString,
            ),
            'CreateTournamentPDF': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateTournamentPDF,
                    request_deserializer=service__pb2.TournamentPDFRequest.FromString,
                    response_serializer=service__pb2.PDFResponse.SerializeToString,
            ),
            'GetPDFStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPDFStatus,
                    request_deserializer=service__pb2.PDFStatusRequest.FromString,
                    response_serializer=service__pb2.PDFStatusResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'services.PDFService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class PDFService(object):
    """Сервис для работы с PDF
    """

    @staticmethod
    def CreateMatchPDF(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/services.PDFService/CreateMatchPDF',
            service__pb2.MatchPDFRequest.SerializeToString,
            service__pb2.PDFResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateTournamentPDF(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/services.PDFService/CreateTournamentPDF',
            service__pb2.TournamentPDFRequest.SerializeToString,
            service__pb2.PDFResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetPDFStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/services.PDFService/GetPDFStatus',
            service__pb2.PDFStatusRequest.SerializeToString,
            service__pb2.PDFStatusResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class RecommenderServiceStub(object):
    """Сервис рекомендаций
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetRecommendations = channel.unary_unary(
                '/services.RecommenderService/GetRecommendations',
                request_serializer=service__pb2.RecommendationRequest.SerializeToString,
                response_deserializer=service__pb2.RecommendationResponse.FromString,
                )
        self.UpdateUserData = channel.unary_unary(
                '/services.RecommenderService/UpdateUserData',
                request_serializer=service__pb2.UserDataRequest.SerializeToString,
                response_deserializer=service__pb2.UserDataResponse.FromString,
                )


class RecommenderServiceServicer(object):
    """Сервис рекомендаций
    """

    def GetRecommendations(self, request, context):
        """Получение рекомендаций для пользователя
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateUserData(self, request, context):
        """Обновление данных пользователя
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RecommenderServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetRecommendations': grpc.unary_unary_rpc_method_handler(
                    servicer.GetRecommendations,
                    request_deserializer=service__pb2.RecommendationRequest.FromString,
                    response_serializer=service__pb2.RecommendationResponse.SerializeToString,
            ),
            'UpdateUserData': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateUserData,
                    request_deserializer=service__pb2.UserDataRequest.FromString,
                    response_serializer=service__pb2.UserDataResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'services.RecommenderService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class RecommenderService(object):
    """Сервис рекомендаций
    """

    @staticmethod
    def GetRecommendations(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/services.RecommenderService/GetRecommendations',
            service__pb2.RecommendationRequest.SerializeToString,
            service__pb2.RecommendationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateUserData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/services.RecommenderService/UpdateUserData',
            service__pb2.UserDataRequest.SerializeToString,
            service__pb2.UserDataResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
